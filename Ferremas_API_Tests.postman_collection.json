{
	"info": {
		"name": "Ferremas API - Complete Test Suite",
		"description": "Comprehensive API testing for Ferremas e-commerce platform on EC2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://18.212.15.99:3000",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "manager_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_product_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_category_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_user_id",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "0️⃣ Setup & Health Checks",
			"item": [
				{
					"name": "Gateway Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success property', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						}
					}
				},
				{
					"name": "System Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('All services are healthy', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    console.log('Services health:', JSON.stringify(jsonData.data, null, 2));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health/system",
							"host": ["{{base_url}}"],
							"path": ["health", "system"]
						}
					}
				}
			]
		},
		{
			"name": "1️⃣ Authentication Tests",
			"item": [
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Admin login successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.tokens.accessToken).to.be.a('string');",
									"    ",
									"    // Store admin token for subsequent requests",
									"    pm.collectionVariables.set('admin_token', jsonData.data.tokens.accessToken);",
									"    console.log('Admin token stored successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@ferremas.cl\",\n  \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					}
				},
				{
					"name": "Manager Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Manager login successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.tokens.accessToken).to.be.a('string');",
									"    ",
									"    // Store manager token",
									"    pm.collectionVariables.set('manager_token', jsonData.data.tokens.accessToken);",
									"    console.log('Manager token stored successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"testmanager@ferremas.com\",\n  \"password\": \"manager123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					}
				},
				{
					"name": "Register New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User registration successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.user.id).to.be.a('string');",
									"    ",
									"    // Store user token and ID",
									"    pm.collectionVariables.set('user_token', jsonData.data.tokens.accessToken);",
									"    pm.collectionVariables.set('test_user_id', jsonData.data.user.id);",
									"    console.log('Test user created with ID:', jsonData.data.user.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test\",\n  \"lastname\": \"Customer\",\n  \"email\": \"test{{$randomInt}}@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "register"]
						}
					}
				},
				{
					"name": "Verify Admin Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Token verification successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.user.role).to.equal('admin');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/verify",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "verify"]
						}
					}
				}
			]
		},
		{
			"name": "2️⃣ Public Product Tests",
			"item": [
				{
					"name": "Get All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Products retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.products).to.be.an('array');",
									"    ",
									"    if (jsonData.data.products.length > 0) {",
									"        pm.collectionVariables.set('test_product_id', jsonData.data.products[0].id);",
									"        console.log('Test product ID stored:', jsonData.data.products[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products?page=1&limit=10",
							"host": ["{{base_url}}"],
							"path": ["api", "products"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "Search Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Product search works', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products?search=martillo",
							"host": ["{{base_url}}"],
							"path": ["api", "products"],
							"query": [
								{
									"key": "search",
									"value": "martillo"
								}
							]
						}
					}
				},
				{
					"name": "Get Product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Product retrieved by ID', function () {",
									"    if (pm.collectionVariables.get('test_product_id')) {",
									"        pm.response.to.have.status(200);",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data.id).to.equal(pm.collectionVariables.get('test_product_id'));",
									"    } else {",
									"        pm.test.skip('No test product ID available');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products/{{test_product_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "products", "{{test_product_id}}"]
						}
					}
				}
			]
		},
		{
			"name": "3️⃣ Category Tests",
			"item": [
				{
					"name": "Get All Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Categories retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    ",
									"    if (jsonData.data.length > 0) {",
									"        pm.collectionVariables.set('test_category_id', jsonData.data[0].id);",
									"        console.log('Test category ID stored:', jsonData.data[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/categories",
							"host": ["{{base_url}}"],
							"path": ["api", "categories"]
						}
					}
				},
				{
					"name": "Get Category by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Category retrieved by ID', function () {",
									"    if (pm.collectionVariables.get('test_category_id')) {",
									"        pm.response.to.have.status(200);",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data.id).to.equal(pm.collectionVariables.get('test_category_id'));",
									"    } else {",
									"        pm.test.skip('No test category ID available');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/categories/{{test_category_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "categories", "{{test_category_id}}"]
						}
					}
				}
			]
		},
		{
			"name": "4️⃣ Manager Service Tests",
			"item": [
				{
					"name": "Create Test Product (Manager)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Product created successfully by manager', function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.id).to.be.a('string');",
									"    ",
									"    // Store the created product ID for cleanup",
									"    pm.globals.set('created_product_id', jsonData.data.id);",
									"    console.log('Created product ID:', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{manager_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"category_id\": \"{{test_category_id}}\",\n  \"name\": \"Test Product via API\",\n  \"description\": \"This is a test product created via Postman\",\n  \"price_clp\": 15990,\n  \"quantity\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/manager/products",
							"host": ["{{base_url}}"],
							"path": ["api", "manager", "products"]
						}
					}
				},
				{
					"name": "Update Product Stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Stock updated successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{manager_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": 75\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/manager/products/{{test_product_id}}/stock",
							"host": ["{{base_url}}"],
							"path": ["api", "manager", "products", "{{test_product_id}}", "stock"]
						}
					}
				},
				{
					"name": "Create Test Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Category created successfully', function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.id).to.be.a('string');",
									"    ",
									"    pm.globals.set('created_category_id', jsonData.data.id);",
									"    console.log('Created category ID:', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{manager_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Category via API\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/manager/categories",
							"host": ["{{base_url}}"],
							"path": ["api", "manager", "categories"]
						}
					}
				}
			]
		},
		{
			"name": "5️⃣ Admin Service Tests",
			"item": [
				{
					"name": "Get All Users (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Users retrieved successfully by admin', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.users).to.be.an('array');",
									"    console.log('Total users found:', jsonData.data.pagination.totalItems);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/users?page=1&limit=10",
							"host": ["{{base_url}}"],
							"path": ["api", "admin", "users"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "Search Users by Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Users filtered by role successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/users?role=admin",
							"host": ["{{base_url}}"],
							"path": ["api", "admin", "users"],
							"query": [
								{
									"key": "role",
									"value": "admin"
								}
							]
						}
					}
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User retrieved by ID successfully', function () {",
									"    if (pm.collectionVariables.get('test_user_id')) {",
									"        pm.response.to.have.status(200);",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data.id).to.equal(pm.collectionVariables.get('test_user_id'));",
									"    } else {",
									"        pm.test.skip('No test user ID available');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/users/{{test_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "admin", "users", "{{test_user_id}}"]
						}
					}
				},
				{
					"name": "Get Dashboard Analytics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Dashboard analytics retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    console.log('Dashboard data retrieved successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/analytics/dashboard",
							"host": ["{{base_url}}"],
							"path": ["api", "admin", "analytics", "dashboard"]
						}
					}
				}
			]
		},
		{
			"name": "6️⃣ Error Handling Tests",
			"item": [
				{
					"name": "Test Unauthorized Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthorized access properly handled', function () {",
									"    pm.response.to.have.status(401);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/admin/users",
							"host": ["{{base_url}}"],
							"path": ["api", "admin", "users"]
						}
					}
				},
				{
					"name": "Test Invalid Product ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid product ID properly handled', function () {",
									"    pm.response.to.have.status(404);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products/invalid-uuid-123",
							"host": ["{{base_url}}"],
							"path": ["api", "products", "invalid-uuid-123"]
						}
					}
				},
				{
					"name": "Test Manager Access to Admin Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Manager cannot access admin endpoints', function () {",
									"    pm.response.to.have.status(403);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{manager_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/users",
							"host": ["{{base_url}}"],
							"path": ["api", "admin", "users"]
						}
					}
				}
			]
		},
		{
			"name": "7️⃣ Cleanup",
			"item": [
				{
					"name": "Delete Test Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test product deleted successfully', function () {",
									"    if (pm.globals.get('created_product_id')) {",
									"        pm.response.to.have.status(200);",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.globals.unset('created_product_id');",
									"        console.log('Test product cleaned up');",
									"    } else {",
									"        pm.test.skip('No test product to delete');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{manager_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/manager/products/{{created_product_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "manager", "products", "{{created_product_id}}"]
						}
					}
				},
				{
					"name": "Delete Test Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test category deleted successfully', function () {",
									"    if (pm.globals.get('created_category_id')) {",
									"        pm.response.to.have.status(200);",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.globals.unset('created_category_id');",
									"        console.log('Test category cleaned up');",
									"    } else {",
									"        pm.test.skip('No test category to delete');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{manager_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/manager/categories/{{created_category_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "manager", "categories", "{{created_category_id}}"]
						}
					}
				}
			]
		}
	]
}